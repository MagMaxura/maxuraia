import React, { useState } from 'react';
import { useToast } from '@/components/ui/use-toast';
import CreateJobAIForm from '@/components/CreateJobAIForm.jsx';
import CreateJobForm from '@/components/CreateJobForm.jsx';
import { cvService } from '@/services/cvService.js';
import { useAuth } from '@/contexts/AuthContext.jsx'; // Para recruiter_id

function CreateNewJobTab({ setActiveTab }) { // Recibe setActiveTab para posible redirección
  const { user } = useAuth();
  const { toast } = useToast();
  const [isProcessingJob, setIsProcessingJob] = useState(false);
  const [jobPostData, setJobPostData] = useState(null); // Para datos generados por IA o para edición

  const handlePublishJob = async (jobPayload) => {
    if (!user?.id) {
      toast({ title: "Error", description: "Usuario no autenticado.", variant: "destructive" });
      return;
    }

    setIsProcessingJob(true);
    try {
      // Asegurarse de que recruiter_id esté en el payload
      const payloadWithRecruiter = { ...jobPayload, recruiter_id: user.id };
      const newJob = await cvService.createJobPost(payloadWithRecruiter);
      console.log("Puesto publicado desde CreateNewJobTab:", newJob);
      
      toast({ title: "¡Puesto Publicado!", description: `${newJob.title} ha sido publicado.` });
      setJobPostData(null); // Limpiar el formulario (o los datos de IA)
      
      // Opcional: notificar al Dashboard para actualizar la lista de jobs si se maneja allí,
      // o redirigir. Por ahora, solo limpiamos y mostramos toast.
      // Si Dashboard necesita actualizar su lista de 'jobs', se necesitaría una prop onJobPublished.
      if (setActiveTab) {
        setActiveTab("puestosPublicados"); // Redirigir a la lista de puestos
      }
    } catch (error) {
      console.error("Error al publicar puesto desde CreateNewJobTab:", error);
      toast({ title: "Error al Publicar", description: `No se pudo publicar el puesto: ${error.message}`, variant: "destructive" });
    } finally {
      setIsProcessingJob(false);
    }
  };

  return (
    <div className="space-y-8">
      <CreateJobAIForm
        onJobGenerated={(generatedData) => {
          console.log("CreateNewJobTab: Job data generated by AI:", generatedData);
          setJobPostData(generatedData);
          toast({ title: "Sugerencia de IA generada", description: "Puedes editar los detalles antes de publicar." });
        }}
        setIsLoadingParent={setIsProcessingJob}
      />
      <CreateJobForm
        initialData={jobPostData}
        key={jobPostData ? JSON.stringify(jobPostData) : 'empty-form'}
        onPublish={handlePublishJob}
        isProcessingJob={isProcessingJob}
      />
    </div>
  );
}

export default CreateNewJobTab;